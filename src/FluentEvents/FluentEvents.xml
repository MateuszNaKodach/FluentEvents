<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentEvents</name>
    </assembly>
    <members>
        <member name="T:FluentEvents.AsyncEventPublisher`1">
            <summary>
                Represents a method that publishes events with FluentEvents.
            </summary>
            <param name="e">The event.</param>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:FluentEvents.Configuration.EventConfigurator`1">
            <summary>
                Provides a simple API surface for configuring an event.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.EventConfigurator`1.IsPiped">
            <summary>
                This method creates a pipeline for the current event.
            </summary>
            <returns>
                An <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> to configure the modules of the pipeline.
            </returns>
        </member>
        <member name="T:FluentEvents.Configuration.EventPipelineConfigurator`1">
            <summary>
                Provides a simple API surface for configuring an event pipeline.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.EventPipelineConfigurator`1.#ctor(FluentEvents.Pipelines.IPipeline,FluentEvents.Configuration.EventConfigurator{`0})">
            <summary>
                Creates an instance by taking dependencies from an <see cref="T:FluentEvents.Configuration.EventConfigurator`1"/>
            </summary>
            <param name="pipeline">The pipeline to configure.</param>
            <param name="eventConfigurator">The event configurator.</param>
        </member>
        <member name="M:FluentEvents.Configuration.EventPipelineConfigurator`1.#ctor(System.IServiceProvider,FluentEvents.Pipelines.IPipeline)">
            <summary>
                Allows to create an instance without passing an <see cref="T:FluentEvents.Configuration.EventConfigurator`1"/>
            </summary>
            <param name="serviceProvider">The events context.</param>
            <param name="pipeline">The pipeline to configure.</param>
        </member>
        <member name="T:FluentEvents.Configuration.PipelinesBuilder">
            <summary>
                Provides a simple API surface to select an event and configure it fluently.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.PipelinesBuilder.#ctor(System.IServiceProvider)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.PipelinesBuilder.Event``1">
            <summary>
                Returns an object that can be used to configure fluently how the event is handled.
                This method can be called multiple times for the same event to
                configure multiple pipelines.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns>The configuration object for the specified event.</returns>
        </member>
        <member name="T:FluentEvents.Configuration.ServiceHandlerConfigurator`2">
            <summary>
                Provides an API surface to configure the subscriptions of a service event handler.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.ServiceHandlerConfigurator`2.HasGlobalSubscription">
            <summary>
                Subscribes the <see cref="M:FluentEvents.IAsyncEventHandler`1.HandleEventAsync(`0)"/> to global events.
            </summary>
            <returns>The configuration object to add more subscriptions.</returns>
        </member>
        <member name="M:FluentEvents.Configuration.ServiceHandlerConfigurator`2.HasScopedSubscription">
            <summary>
                Subscribes the <see cref="M:FluentEvents.IAsyncEventHandler`1.HandleEventAsync(`0)"/> to scoped events.
            </summary>
            <returns>The configuration object to add more subscriptions.</returns>
        </member>
        <member name="T:FluentEvents.Configuration.SubscriptionsBuilder">
            <summary>
                Provides a simple API surface to select a service and configure it fluently.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.SubscriptionsBuilder.#ctor(FluentEvents.Subscriptions.IGlobalSubscriptionsService,FluentEvents.Subscriptions.IScopedSubscriptionsService)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.SubscriptionsBuilder.ServiceHandler``2">
            <summary>
                Maps required services to the <see cref="T:FluentEvents.EventsContext"/>.
                If the <see cref="T:System.IServiceProvider"/> doesn't return any service of this type an exception is thrown during publishing.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TEvent">The type of the event</typeparam>
            <returns>
                Returns an object that can be used to configure subscriptions for
                an <see cref="M:FluentEvents.IAsyncEventHandler`1.HandleEventAsync(`0)"/> method.
            </returns>
        </member>
        <member name="M:FluentEvents.Configuration.SubscriptionsBuilder.OptionalServiceHandler``2">
            <summary>
                Maps optional services to the <see cref="T:FluentEvents.EventsContext"/>.
                If the <see cref="T:System.IServiceProvider"/> doesn't return any service of this type no exceptions will be thrown during publishing.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TEvent">The type of the event</typeparam>
            <returns>
                Returns an object that can be used to configure subscriptions for
                an <see cref="M:FluentEvents.IAsyncEventHandler`1.HandleEventAsync(`0)"/> method.
            </returns>
        </member>
        <member name="T:FluentEvents.EventPublisher`1">
            <summary>
                Represents a method that publishes events with FluentEvents.
            </summary>
            <param name="e">The event.</param>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:FluentEvents.EventsContext">
            <summary>
                The <see cref="T:FluentEvents.EventsContext"/> provides the API surface to configure the event pipelines and the event subscriptions.
                An <see cref="T:FluentEvents.EventsContext"/> should be treated as a singleton.
            </summary>
        </member>
        <member name="M:FluentEvents.EventsContext.#ctor(FluentEvents.EventsContextOptions,FluentEvents.Infrastructure.IRootAppServiceProvider)">
            <summary>
                Creates a new <see cref="T:FluentEvents.EventsContext"/>
            </summary>
            <param name="options">The options for this context.</param>
            <param name="rootAppServiceProvider">The application root service provider.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.OnConfiguring(FluentEvents.EventsContextOptions)">
            <summary>
                Override this method to override the options supplied in the constructor.
                The resulting configuration may be cached and re-used during the entire lifespan of the context.
            </summary> 
            <remarks>The default implementation of this method does nothing.</remarks>
            <param name="options">The options of the <see cref="T:FluentEvents.EventsContext"/>.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.OnBuildingSubscriptions(FluentEvents.Configuration.SubscriptionsBuilder)">
            <summary>
                Override this method to configure the event subscriptions.
                The resulting configuration may be cached and re-used during the entire lifespan of the context.
            </summary>
            <remarks>The default implementation of this method does nothing.</remarks>
            <param name="subscriptionsBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.OnBuildingPipelines(FluentEvents.Configuration.PipelinesBuilder)">
            <summary>
                Override this method to configure the pipelines needed for handling the events.
                The resulting configuration may be cached and re-used during the entire lifespan of the context.
            </summary>
            <remarks>The default implementation of this method does nothing.</remarks>
            <param name="pipelinesBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.Attach(System.Object,FluentEvents.EventsScope)">
            <summary>
                Attach an event source to the context in order to forward it's events to the configured pipelines.
            </summary>
            <param name="source">The event source.</param>
            <param name="eventsScope">The scope of the events published from this source.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.ProcessQueuedEventsAsync(FluentEvents.EventsScope,System.String)">
            <summary>
                Continues the processing of the events that have been queued.
            </summary>
            <param name="eventsScope">The scope where the queued events were published.</param>
            <param name="queueName">
                The name of the queue.
                If null all the events will be processed.
            </param>
        </member>
        <member name="M:FluentEvents.EventsContext.DiscardQueuedEvents(FluentEvents.EventsScope,System.String)">
            <summary>
                Discards all the events of a queue.
            </summary>
            <param name="eventsScope">The scope where the queued events were published.</param>
            <param name="queueName">
                The name of the queue.
                If null all the events will be discarded.
            </param>
        </member>
        <member name="T:FluentEvents.EventsContextOptions">
            <summary>
                The options used by an <see cref="T:FluentEvents.EventsContext"/>
            </summary>
        </member>
        <member name="M:FluentEvents.EventsContextOptions.#ctor">
            <summary>
                Initializes a new instance.
            </summary>
        </member>
        <member name="T:FluentEvents.EventsScope">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.EventsScope.#ctor(FluentEvents.Infrastructure.IScopedAppServiceProvider)">
            <summary>
                Creates a new <see cref="T:FluentEvents.EventsScope"/>
            </summary>
            <param name="scopedAppServiceProvider">A scoped instance of the application service provider.</param>
        </member>
        <member name="T:FluentEvents.FluentEventsException">
            <inheritdoc />
            <summary>
                A base exception inherited by all exceptions thrown by FluentEvents (Except for <see cref="T:System.AggregateException"/>s).
            </summary>
        </member>
        <member name="M:FluentEvents.FluentEventsException.#ctor(System.String)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:FluentEvents.FluentEventsException" /> class.
            </summary>
        </member>
        <member name="M:FluentEvents.FluentEventsException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:FluentEvents.FluentEventsException" /> class.
            </summary>
        </member>
        <member name="T:FluentEvents.IAsyncEventHandler`1">
            <summary>
                An interface implemented by a service to handle an event.
                Note: the subscription should be configured in the
                <see cref="M:FluentEvents.EventsContext.OnBuildingSubscriptions(FluentEvents.Configuration.SubscriptionsBuilder)"/> method.
            </summary>
            <typeparam name="TEvent">the type of the event.</typeparam>
        </member>
        <member name="M:FluentEvents.IAsyncEventHandler`1.HandleEventAsync(`0)">
            <summary>
                Handles an event.
            </summary>
            <param name="e">The event.</param>
            <returns></returns>
        </member>
        <member name="T:FluentEvents.IEventsContext">
            <summary>
                An interface for <see cref="T:FluentEvents.EventsContext"/>s.
            </summary>
        </member>
        <member name="T:FluentEvents.Infrastructure.IEventsScope">
            <summary>
                The <see cref="T:FluentEvents.Infrastructure.IEventsScope"/> represents the scope where entities are attached and the events
                are handled or queued.
            </summary>
        </member>
        <member name="M:FluentEvents.Infrastructure.IEventsScope.GetOrAddFeature``1(System.Func{FluentEvents.Infrastructure.IScopedAppServiceProvider,``0})">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Infrastructure.IInfrastructure`1">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:FluentEvents.Infrastructure.IInfrastructure`1.Instance">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Infrastructure.IRootAppServiceProvider">
            <summary>
                Represents the application service provider.
            </summary>
        </member>
        <member name="T:FluentEvents.Infrastructure.IScopedAppServiceProvider">
            <summary>
                Represents a scoped application service provider.
            </summary>
        </member>
        <member name="T:FluentEvents.Model.ISourceModelsService">
            <summary>
                Provides an API surface for getting or creating <see cref="T:FluentEvents.Model.SourceModel"/>s.
            </summary>
        </member>
        <member name="M:FluentEvents.Model.ISourceModelsService.GetSourceModel(System.Type)">
            <summary>
                Gets a previously created <see cref="T:FluentEvents.Model.SourceModel"/>.
            </summary>
            <param name="crlType">The <see cref="T:System.Type"/> of the events source.</param>
            <returns>The <see cref="T:FluentEvents.Model.SourceModel"/> for this <see cref="T:System.Type"/> if exists, otherwise null.</returns>
        </member>
        <member name="M:FluentEvents.Model.ISourceModelsService.GetOrCreateSourceModel(System.Type)">
            <summary>
                Gets or creates a new <see cref="T:FluentEvents.Model.SourceModel"/>.
            </summary>
            <param name="clrType">The <see cref="T:System.Type"/> of the events source.</param>
            <returns>The <see cref="T:FluentEvents.Model.SourceModel"/> for this <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:FluentEvents.Model.ISourceModelsService.GetSourceModels">
            <summary>
                Gets all the <see cref="T:FluentEvents.Model.SourceModel"/> created with the <see cref="M:FluentEvents.Model.ISourceModelsService.GetOrCreateSourceModel(System.Type)"/> method.
            </summary>
        </member>
        <member name="T:FluentEvents.Model.SourceDoesNotMatchModelTypeException">
            <summary>
                An exception thrown when trying to route an event with a source type different from
                the <see cref="P:FluentEvents.Model.SourceModel.ClrType"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Model.SourceModel">
            <summary>
                Represents an event source.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModel.ClrType">
            <summary>
                The type of the event source.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModel.EventFields">
            <summary>
                The list of the event fields present on the <see cref="P:FluentEvents.Model.SourceModel.ClrType"/> and created on this model.
            </summary>
        </member>
        <member name="M:FluentEvents.Model.SourceModel.#ctor(System.Type)">
            <summary>
                Creates a new instance of a <see cref="T:FluentEvents.Model.SourceModel"/>.
            </summary>
            <param name="clrType"></param>
        </member>
        <member name="T:FluentEvents.Model.SourceModelEventField">
            <summary>
                Represents a field of an event source.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.EventInfo">
            <summary>
                The <see cref="T:System.Reflection.EventInfo"/> of the represented event field.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.FieldInfo">
            <summary>
                The <see cref="T:System.Reflection.FieldInfo"/> of the represented event field.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.Name">
            <summary>
                The name of the represented event field.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.ReturnType">
            <summary>
                The return type of the represented event field.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.IsAsync">
            <summary>
                Indicates if the represented event field has an async <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Model.SourceModelsService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Model.SourceModelsService.#ctor">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Model.SourceModelsService.GetSourceModel(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Model.SourceModelsService.GetOrCreateSourceModel(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Model.SourceModelsService.GetSourceModels">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Pipelines.Filters.EventPipelineConfiguratorExtensions">
            <summary>
                Extension methods for adding an events filter to a pipeline.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Filters.EventPipelineConfiguratorExtensions.ThenIsFiltered``1(FluentEvents.Configuration.EventPipelineConfigurator{``0},System.Func{``0,System.Boolean})">
            <summary>
                Adds an event filtering module to the current pipeline.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventPipelineConfigurator">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> for the pipeline being configured.
            </param>
            <param name="filter">
                A <see cref="T:System.Func`2"/> that takes the event
                as input and returns false if it should be filtered
                (When an event is filtered any module configured after the filter won't be invoked).
            </param>
            <returns>
                The same <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="T:FluentEvents.Pipelines.IPipeline">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.IPipeline.ProcessEventAsync(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.IPipeline.AddModule``2(``1)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.IPipelineModule`1">
            <summary>
                Represents a module for event pipelines.
            </summary>
            <typeparam name="TConfig">The type of the configuration.</typeparam>
        </member>
        <member name="M:FluentEvents.Pipelines.IPipelineModule`1.InvokeAsync(`0,FluentEvents.Pipelines.PipelineContext,FluentEvents.Pipelines.NextModuleDelegate)">
            <summary>
                This method should work with the event and invoke the <see cref="T:FluentEvents.Pipelines.NextModuleDelegate"/>
                passed in the parameters if and when the event processing should continue. 
            </summary>
            <param name="config">The configuration for the particular event being processed.</param>
            <param name="pipelineContext">The current pipeline processing context.</param>
            <param name="invokeNextModule">The delegate to invoke the next module in the pipeline.</param>
            <returns>A task to await.</returns>
        </member>
        <member name="T:FluentEvents.Pipelines.IPipelinesService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.IPipelinesService.AddPipeline(System.Type,FluentEvents.Pipelines.IPipeline)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.IPipelinesService.GetPipelines(System.Type)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.NextModuleDelegate">
            <summary>
                Invokes the next module in the pipeline if exists, otherwise it does nothing.
            </summary>
            <param name="pipelineContext">The current pipeline processing context.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="T:FluentEvents.Pipelines.Pipeline">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Pipeline.AddModule``2(``1)">
            <summary>
                Adds a module with the associated configuration to the pipeline.
            </summary>
            <typeparam name="TModule">The type of the module.</typeparam>
            <typeparam name="TConfig">The type of the module configuration.</typeparam>
            <param name="moduleConfig">An instance of the module configuration</param>
        </member>
        <member name="M:FluentEvents.Pipelines.Pipeline.ProcessEventAsync(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Pipelines.PipelineContext">
            <summary>
                Represents a pipeline processing context. 
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineContext.PipelineEvent">
            <summary>
                The event being processed.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineContext.ServiceProvider">
            <summary>
                The internal service provider.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineContext.EventsScope">
            <summary>
                The current events scope.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.PipelineContext.#ctor(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope,System.IServiceProvider)">
            <summary>
                Creates a new instance of a <see cref="T:FluentEvents.Pipelines.PipelineContext"/>.
            </summary>
            <param name="pipelineEvent">The event being processed.</param>
            <param name="eventsScope">The current events scope.</param>
            <param name="serviceProvider">The internal service provider.</param>
        </member>
        <member name="T:FluentEvents.Pipelines.PipelineEvent">
            <summary>
                Represents an event.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineEvent.Event">
            <summary>
                The instance of the event.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineEvent.EventType">
            <summary>
                The instance of the event.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.PipelineEvent.#ctor(System.Object)">
            <param name="event">The instance of the event.</param>
        </member>
        <member name="T:FluentEvents.Pipelines.PipelineModuleNotFoundException">
            <summary>
                An exception thrown when the configured pipeline module wasn't registered
                in the internal <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.PipelinesService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.PipelinesService.#ctor">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.PipelinesService.AddPipeline(System.Type,FluentEvents.Pipelines.IPipeline)">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Pipelines.PipelinesService.GetPipelines(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Pipelines.Projections.EventPipelineConfiguratorExtensions">
            <summary>
                Extension methods for adding a projection to a pipeline.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Projections.EventPipelineConfiguratorExtensions.ThenIsProjected``2(FluentEvents.Configuration.EventPipelineConfigurator{``0},System.Func{``0,``1})">
            <summary>
                Adds a module to the current pipeline that replaces event with a projection.
            </summary>
            <remarks>
                Projections are useful when an event needs to be serialized in order to reduce
                the size and the complexity of the serialization output.
            </remarks>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="TToEvent">The type of the projected event.</typeparam>
            <param name="eventPipelineConfigurator">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> for the pipeline being configured.
            </param>
            <param name="eventConverter">
                A <see cref="T:System.Func`2"/> that takes the event as input and returns a new object.
            </param>
            <returns>
                A new <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.ConfigureTransmission">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.EventPipelineConfiguratorExtensions">
            <summary>
                Extension methods for adding a publishing module to the pipeline.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Publication.EventPipelineConfiguratorExtensions.ThenIsPublishedToScopedSubscriptions``1(FluentEvents.Configuration.EventPipelineConfigurator{``0})">
            <summary>
                Adds a module to the current pipeline that publishes the event to all the subscriptions in scope locally.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventPipelineConfigurator">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> for the pipeline being configured.
            </param>
            <returns>The same <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:FluentEvents.Pipelines.Publication.EventPipelineConfiguratorExtensions.ThenIsPublishedToGlobalSubscriptions``1(FluentEvents.Configuration.EventPipelineConfigurator{``0},System.Func{FluentEvents.Pipelines.Publication.ConfigureTransmission,FluentEvents.Pipelines.Publication.IPublishTransmissionConfiguration})">
            <summary>
                Adds a module to the current pipeline that publishes the event to all the global subscriptions using a transmission method
                configurable with the configurePublishTransmission parameter.
            </summary>
            <remarks>
                This method can be used to configure a publication to multiple application instances with this <see cref="T:FluentEvents.EventsContext"/>
            </remarks>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventPipelineConfigurator">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> for the pipeline being configured.
            </param>
            <param name="configurePublishTransmission">A delegate for configuring how the event is transmitted.</param>
            <returns>The same <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:FluentEvents.Pipelines.Publication.EventPipelineConfiguratorExtensions.ThenIsPublishedToGlobalSubscriptions``1(FluentEvents.Configuration.EventPipelineConfigurator{``0})">
            <summary>
                Adds a module to the current pipeline that publishes the event to all the global subscriptions locally.
            </summary>
            <typeparam name="TEvent">The type that publishes the event.</typeparam>
            <param name="eventPipelineConfigurator">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> for the pipeline being configured.
            </param>
            <returns>The same <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.EventSenderNotFoundException">
            <summary>
                An exception thrown when the configured <see cref="T:FluentEvents.Transmission.IEventSender"/>
                wasn't registered in the internal <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.EventTransmissionPluginIsNotConfiguredException">
            <summary>
                An exception thrown when the transmission plugin is not configured in the <see cref="T:FluentEvents.EventsContextOptions"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.IConfigureTransmission">
            <summary>
                Provides a simple API surface to specify the sender to invoke for the transmission being configured. 
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Publication.IConfigureTransmission.With``1">
            <summary>
                This method creates a <see cref="T:FluentEvents.Pipelines.Publication.IPublishTransmissionConfiguration"/> with the specified sender type.
            </summary>
            <typeparam name="T">The type of the event sender.</typeparam>
            <returns>A configuration object with the specified sender type.</returns>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.IPublishTransmissionConfiguration">
            <summary>
                The configuration for an event transmission.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.Publication.IPublishTransmissionConfiguration.SenderType">
            <summary>
                The type of the event sender.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.PublishTransmissionConfiguration">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Pipelines.Queues.EventPipelineConfiguratorExtensions">
            <summary>
                Extension methods for adding a pipeline module that queues the events.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Queues.EventPipelineConfiguratorExtensions.ThenIsQueuedTo``1(FluentEvents.Configuration.EventPipelineConfigurator{``0},System.String)">
            <summary>
                Adds module to the current pipeline that queues the event in a queue
                and pauses the execution of the current pipeline until the event is dequeued.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventPipelineConfigurator">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> for the pipeline being configured.
            </param>
            <param name="queueName">The name of the queue.</param>
            <returns>
                The same <see cref="T:FluentEvents.Configuration.EventPipelineConfigurator`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="T:FluentEvents.Plugins.DuplicatePluginException">
            <summary>
                An exception thrown when adding the same plugin twice.
            </summary>
        </member>
        <member name="T:FluentEvents.Plugins.IFluentEventsPlugin">
            <summary>
                This interface should be implemented by plugins.
            </summary>
        </member>
        <member name="M:FluentEvents.Plugins.IFluentEventsPlugin.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the services required for the plugin to the framework's internal <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">The framework's internal <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
        </member>
        <member name="T:FluentEvents.Plugins.IFluentEventsPluginOptions">
            <summary>
                Provides a way to add or list plugins.
            </summary>
        </member>
        <member name="M:FluentEvents.Plugins.IFluentEventsPluginOptions.AddPlugin(FluentEvents.Plugins.IFluentEventsPlugin)">
            <summary>
                Adds a plugin.
            </summary>
            <remarks>
                This method should be called with custom extension methods
                to provide a better configuration experience.
            </remarks>
            <param name="plugin">The instance of the plugin.</param>
        </member>
        <member name="P:FluentEvents.Plugins.IFluentEventsPluginOptions.Plugins">
            <summary>
                Returns the list of the added plugins.
            </summary>
        </member>
        <member name="T:FluentEvents.Queues.EventsQueueNotFoundException">
            <summary>
                An exception that is thrown when the events queue with the specified name does not exists.
            </summary>
        </member>
        <member name="T:FluentEvents.Queues.IEventsQueue">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Queues.IEventsQueue.DiscardQueuedEvents">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Queues.IEventsQueue.Enqueue(FluentEvents.Queues.QueuedPipelineEvent)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Queues.IEventsQueue.DequeueAll">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:FluentEvents.Queues.IEventsQueue.Name">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Queues.QueuedPipelineEvent">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:FluentEvents.Queues.QueuedPipelineEvent.InvokeNextModule">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:FluentEvents.Queues.QueuedPipelineEvent.PipelineEvent">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Queues.QueuedPipelineEvent.#ctor(System.Func{System.Threading.Tasks.Task},FluentEvents.Pipelines.PipelineEvent)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Routing.AttachingService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Routing.AttachingService.#ctor(FluentEvents.Model.ISourceModelsService,FluentEvents.Routing.IForwardingService,System.Collections.Generic.IEnumerable{FluentEvents.Routing.IAttachingInterceptor})">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Routing.AttachingService.Attach(System.Object,FluentEvents.Infrastructure.IEventsScope)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Routing.ForwardingService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Routing.ForwardingService.#ctor(FluentEvents.Routing.IRoutingService)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Routing.ForwardingService.ForwardEventsToRouting(FluentEvents.Model.SourceModel,System.Object,FluentEvents.Infrastructure.IEventsScope)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Routing.IAttachingInterceptor">
            <summary>
                This interface can be implemented to intercept every attaching made to the <see cref="T:FluentEvents.EventsContext"/>.
            </summary>
        </member>
        <member name="M:FluentEvents.Routing.IAttachingInterceptor.OnAttaching(FluentEvents.Routing.IAttachingService,System.Object,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                This method can be used to handle complex attaching situations (For example attaching to the entities of an ORM).
            </summary>
            <param name="attachingService">The attaching service that invokes the interceptor.</param>
            <param name="source">The events source being attached.</param>
            <param name="eventsScope">The current <see cref="T:FluentEvents.Infrastructure.IEventsScope"/></param>
        </member>
        <member name="T:FluentEvents.Routing.IAttachingService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Routing.IAttachingService.Attach(System.Object,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Routing.IForwardingService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Routing.IForwardingService.ForwardEventsToRouting(FluentEvents.Model.SourceModel,System.Object,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Routing.IRoutingService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Routing.IRoutingService.RouteEventAsync(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Routing.RoutingService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Routing.RoutingService.#ctor(Microsoft.Extensions.Logging.ILogger{FluentEvents.Routing.RoutingService},FluentEvents.Pipelines.IPipelinesService)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Routing.RoutingService.RouteEventAsync(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.ServiceCollectionExtensions">
            <summary>
                Extension methods for configuring an <see cref="T:FluentEvents.EventsContext"/> with Dependency Injection.
            </summary>
        </member>
        <member name="M:FluentEvents.ServiceCollectionExtensions.AddEventsContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{FluentEvents.EventsContextOptions})">
            <summary>
                Registers the given <see cref="T:FluentEvents.EventsContext"/> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="T">The type of context to be registered.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register with.</param>
            <param name="optionsBuilder">
                <para>
                    An action to configure the <see cref="T:FluentEvents.EventsContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:FluentEvents.EventsContext.OnConfiguring(FluentEvents.EventsContextOptions)" /> method in your derived context.
                </para>
                <para>
                    If an action is supplied here, the <see cref="M:FluentEvents.EventsContext.OnConfiguring(FluentEvents.EventsContextOptions)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:FluentEvents.EventsContext.OnConfiguring(FluentEvents.EventsContextOptions)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
            </param>
            <returns>The original <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:FluentEvents.ServiceCollectionExtensions.AddWithEventsAttachedTo``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action)">
            <summary>
                This method watches the services registered inside of the addServicesAction
                and makes sure that they are attached to the <see cref="T:FluentEvents.EventsContext"/>
                when they are resolved by the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <example>
                <code>
                    public void ConfigureServices(IServiceCollection services)
                    {
                        services
                            .AddWithEventsAttachedTo&lt;MyEventsContext&gt;(() => {
                                services.AddScoped&lt;IMyService, MyService&gt;();
                                services.AddSingleton&lt;IMyService2, MyService2&gt;();
                            });
                    }
                </code>
            </example>
            <typeparam name="TEventsContext">The <see cref="T:FluentEvents.EventsContext"/> where the services are attached.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register with.</param>
            <param name="addServicesAction">An <see cref="T:System.Action"/> that add services to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The original <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="T:FluentEvents.Subscriptions.EventTypeMismatchException">
            <summary>
                An exception that is thrown when the source of the event to publish
                is not an instance of <see cref="P:FluentEvents.Subscriptions.Subscription.EventType"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Subscriptions.GlobalSubscriptionsService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Subscriptions.GlobalSubscriptionsService.#ctor(FluentEvents.Infrastructure.IRootAppServiceProvider)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.GlobalSubscriptionsService.AddGlobalServiceHandlerSubscription``2(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Subscriptions.GlobalSubscriptionsService.GetGlobalSubscriptions">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Subscriptions.IGlobalSubscriptionsService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.IGlobalSubscriptionsService.AddGlobalServiceHandlerSubscription``2(System.Boolean)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.IGlobalSubscriptionsService.GetGlobalSubscriptions">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Subscriptions.IPublishingService">
            <summary>
                Provides APIs to publish events.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.IPublishingService.PublishEventToScopedSubscriptionsAsync(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                Publish an events to all the scoped subscriptions.
            </summary>
            <param name="pipelineEvent">The event to publish.</param>
            <param name="eventsScope">The scope of the event and the subscriptions.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:FluentEvents.Subscriptions.IPublishingService.PublishEventToGlobalSubscriptionsAsync(FluentEvents.Pipelines.PipelineEvent)">
            <summary>
                Publishes an event to all the global subscriptions.
            </summary>
            <param name="pipelineEvent"> event to publish.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="T:FluentEvents.Subscriptions.IScopedSubscriptionsService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.IScopedSubscriptionsService.ConfigureScopedServiceHandlerSubscription``2(System.Boolean)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.IScopedSubscriptionsService.SubscribeServices(FluentEvents.Infrastructure.IScopedAppServiceProvider)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Subscriptions.ISubscriptionsMatchingService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.ISubscriptionsMatchingService.GetMatchingSubscriptionsForEvent(System.Collections.Generic.IEnumerable{FluentEvents.Subscriptions.Subscription},System.Object)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Subscriptions.PublishingService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Subscriptions.PublishingService.#ctor(Microsoft.Extensions.Logging.ILogger{FluentEvents.Subscriptions.PublishingService},FluentEvents.IEventsContext,FluentEvents.Subscriptions.IGlobalSubscriptionsService,FluentEvents.Subscriptions.ISubscriptionsMatchingService)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.PublishingService.PublishEventToScopedSubscriptionsAsync(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Subscriptions.PublishingService.PublishEventToGlobalSubscriptionsAsync(FluentEvents.Pipelines.PipelineEvent)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Subscriptions.SubscribingServiceNotFoundException">
            <summary>
                An exception thrown when the application's <see cref="T:System.IServiceProvider"/> can't resolve a service
                with an automatic subscription configured.
            </summary>
        </member>
        <member name="P:FluentEvents.Subscriptions.SubscribingServiceNotFoundException.ServiceType">
            <summary>
                The type of the service that wasn't found.
            </summary>
        </member>
        <member name="T:FluentEvents.Subscriptions.Subscription">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Subscriptions.SubscriptionsMatchingService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Subscriptions.SubscriptionsMatchingService.GetMatchingSubscriptionsForEvent(System.Collections.Generic.IEnumerable{FluentEvents.Subscriptions.Subscription},System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Transmission.EventReceiversHostedService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.EventReceiversHostedService.#ctor(FluentEvents.IEventsContext)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.EventReceiversHostedService.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Transmission.EventReceiversHostedService.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Transmission.EventReceiversService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Transmission.EventReceiversService.#ctor(Microsoft.Extensions.Logging.ILogger{FluentEvents.Transmission.EventReceiversService},System.Collections.Generic.IEnumerable{FluentEvents.Transmission.IEventReceiver})">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.EventReceiversService.StartReceiversAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Transmission.EventReceiversService.StopReceiversAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:FluentEvents.Transmission.IEventReceiver">
            <summary>
                Represents a service that receives events transmitted from an <see cref="T:FluentEvents.Transmission.IEventSender"/>.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.IEventReceiver.StartReceivingAsync(System.Threading.CancellationToken)">
            <summary>
                This method should start a worker that receives events transmitted from an <see cref="T:FluentEvents.Transmission.IEventSender"/>. 
            </summary>
            <param name="cancellationToken">Indicates that the start receiving process has been aborted.</param>
        </member>
        <member name="M:FluentEvents.Transmission.IEventReceiver.StopReceivingAsync(System.Threading.CancellationToken)">
            <summary>
                This method should stop the worker that receives events transmitted from an <see cref="T:FluentEvents.Transmission.IEventSender"/>. 
            </summary>
            <param name="cancellationToken">Indicates that the start receiving process has been aborted.</param>
        </member>
        <member name="T:FluentEvents.Transmission.IEventReceiversService">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.IEventReceiversService.StartReceiversAsync(System.Threading.CancellationToken)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.IEventReceiversService.StopReceiversAsync(System.Threading.CancellationToken)">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Transmission.IEventSender">
            <summary>
                Represents a service that send events to an <see cref="T:FluentEvents.Transmission.IEventReceiver"/>.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.IEventSender.SendAsync(FluentEvents.Pipelines.PipelineEvent)">
            <summary>
                This method should send the event to an <see cref="T:FluentEvents.Transmission.IEventReceiver"/>.
            </summary>
            <param name="pipelineEvent">The event to send.</param>
        </member>
        <member name="T:FluentEvents.Transmission.IEventsSerializationService">
            <summary>
                A service that serializes or deserializes an event for transmission.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.IEventsSerializationService.SerializeEvent(FluentEvents.Pipelines.PipelineEvent)">
            <summary>
                This method should serialize an event.
            </summary>
            <param name="pipelineEvent">The event to serialize.</param>
            <returns>The event serialized.</returns>
        </member>
        <member name="M:FluentEvents.Transmission.IEventsSerializationService.DeserializeEvent(System.Byte[])">
            <summary>
                This method should deserialize an event.
            </summary>
            <param name="eventData">The event to deserialize.</param>
            <returns>The event deserialized.</returns>
        </member>
        <member name="T:FluentEvents.Transmission.JsonEventsSerializationService">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Transmission.JsonEventsSerializationService.#ctor">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.JsonEventsSerializationService.SerializeEvent(FluentEvents.Pipelines.PipelineEvent)">
            <inheritdoc />
        </member>
        <member name="M:FluentEvents.Transmission.JsonEventsSerializationService.DeserializeEvent(System.Byte[])">
            <inheritdoc />
        </member>
    </members>
</doc>
