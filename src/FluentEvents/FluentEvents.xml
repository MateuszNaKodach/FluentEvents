<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentEvents</name>
    </assembly>
    <members>
        <member name="T:FluentEvents.AsyncEventPublisher`1">
            <summary>
                Represents a method that publishes events with FluentEvents.
            </summary>
            <param name="e">The event.</param>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:FluentEvents.Attachment.AttachDelegate">
            <summary>
                Allows interceptors to attach sources in the <see cref="M:FluentEvents.Attachment.IAttachingInterceptor.OnAttaching(FluentEvents.Attachment.AttachDelegate,System.Object,FluentEvents.Infrastructure.IEventsScope)"/> method.
            </summary>
            <param name="source">The events source being attached.</param>
            <param name="eventsScope">The current <see cref="T:FluentEvents.Infrastructure.IEventsScope"/></param>
        </member>
        <member name="T:FluentEvents.Attachment.IAttachingInterceptor">
            <summary>
                This interface can be implemented to intercept every attaching made
                to the <see cref="T:FluentEvents.EventsContext"/>.
            </summary>
        </member>
        <member name="M:FluentEvents.Attachment.IAttachingInterceptor.OnAttaching(FluentEvents.Attachment.AttachDelegate,System.Object,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                This method can be used to handle complex attaching situations
                (For example attaching to the entities of an ORM).
            </summary>
            <param name="attach">A delegate that allows the interceptor to attach sources.</param>
            <param name="source">The events source being attached.</param>
            <param name="eventsScope">The current <see cref="T:FluentEvents.Infrastructure.IEventsScope"/></param>
        </member>
        <member name="T:FluentEvents.Configuration.EventConfiguration`1">
            <summary>
                Allows configuration to be performed for an event type.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.EventConfiguration`1.IsPiped">
            <summary>
                This method creates a pipeline for the current event.
            </summary>
            <returns>
                An <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> to configure the modules of the pipeline.
            </returns>
        </member>
        <member name="T:FluentEvents.Configuration.EventPipelineConfiguration`1">
            <summary>
                Allows configuration to be performed for an event pipeline.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.EventPipelineConfiguration`1.#ctor(System.IServiceProvider,FluentEvents.Pipelines.IPipeline)">
            <summary>
                Creates a new instance of <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/>
            </summary>
            <param name="serviceProvider">The internal service provider.</param>
            <param name="pipeline">The pipeline to configure.</param>
        </member>
        <member name="T:FluentEvents.Configuration.EventsContextOptions">
            <summary>
                The options used by an <see cref="T:FluentEvents.EventsContext"/>
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.EventsContextOptions.#ctor">
            <summary>
                Initializes a new instance.
            </summary>
        </member>
        <member name="T:FluentEvents.Configuration.IEventsContextOptions">
            <summary>
                Provides a way to add or list plugins.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.IEventsContextOptions.AddPlugin(FluentEvents.Plugins.IFluentEventsPlugin)">
            <summary>
                Adds a plugin.
            </summary>
            <remarks>
                This method should be called with custom extension methods
                to provide a better configuration experience.
            </remarks>
            <param name="plugin">The instance of the plugin.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="plugin"/> is null.
            </exception>
            <exception cref="T:FluentEvents.Plugins.DuplicatePluginException">
                Another plugin with the same type has already been added.
            </exception>
        </member>
        <member name="P:FluentEvents.Configuration.IEventsContextOptions.Plugins">
            <summary>
                Returns the list of the added plugins.
            </summary>
        </member>
        <member name="T:FluentEvents.Configuration.IPipelinesBuilder">
            <summary>
                Allows pipelines configuration to be performed for event types.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.IPipelinesBuilder.Event``1">
            <summary>
                Allows configuration to be performed for an event type.
                This method can be called multiple times for the same event
                type in order to configure multiple pipelines.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns>The configuration object for the specified event.</returns>
        </member>
        <member name="T:FluentEvents.Configuration.ISubscriptionsBuilder">
            <summary>
                Allows subscriptions configuration to be performed for a service type and an event type.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.ISubscriptionsBuilder.ServiceHandler``2">
            <summary>
                Allows configuration for required event subscriptions, to be performed for a service type.
                (Multiple services with the same type are supported)
                When a configured subscription receives an event and the <see cref="T:System.IServiceProvider"/>
                doesn't return any service of this type an exception is thrown during publishing.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TEvent">The type of the event to handle.</typeparam>
            <returns>
                Returns an object that can be used to configure subscriptions for the service type.
            </returns>
        </member>
        <member name="M:FluentEvents.Configuration.ISubscriptionsBuilder.OptionalServiceHandler``2">
            <summary>
                Allows configuration for optional event subscriptions, to be performed for a service type.
                (Multiple services with the same type are supported)
                When a configured subscription receives an event and the <see cref="T:System.IServiceProvider"/>
                doesn't return any service of this type no exceptions will be thrown.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TEvent">The type of the event to handle.</typeparam>
            <returns>
                Returns an object that can be used to configure subscriptions for the service type.
            </returns>
        </member>
        <member name="T:FluentEvents.Configuration.ServiceHandlerConfiguration`2">
            <summary>
                Allows configuration to be performed for a service type.
            </summary>
        </member>
        <member name="M:FluentEvents.Configuration.ServiceHandlerConfiguration`2.HasGlobalSubscription">
            <summary>
                Subscribes the service handler to global events.
            </summary>
            <returns>The configuration object to add more subscriptions.</returns>
        </member>
        <member name="M:FluentEvents.Configuration.ServiceHandlerConfiguration`2.HasScopedSubscription">
            <summary>
                Subscribes the service handler to scoped events.
            </summary>
            <returns>The configuration object to add more subscriptions.</returns>
        </member>
        <member name="T:FluentEvents.EventPublisher`1">
            <summary>
                Represents a method that publishes events with FluentEvents.
            </summary>
            <param name="e">The event.</param>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:FluentEvents.EventsContext">
            <summary>
                <para>
                    The <see cref="T:FluentEvents.EventsContext"/> provides the API surface to configure the event pipelines and the event subscriptions.
                </para>
                <para>
                    An <see cref="T:FluentEvents.EventsContext"/> should be treated as a singleton.
                </para>
            </summary>
        </member>
        <member name="M:FluentEvents.EventsContext.#ctor(FluentEvents.Configuration.EventsContextOptions,FluentEvents.ServiceProviders.IRootAppServiceProvider)">
            <summary>
                Creates a new <see cref="T:FluentEvents.EventsContext"/>
            </summary>
            <param name="options">The options for this context.</param>
            <param name="rootAppServiceProvider">The application root service provider.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.OnConfiguring(FluentEvents.Configuration.EventsContextOptions)">
            <summary>
                Override this method to alter the options supplied in the constructor.
                The resulting configuration may be cached and re-used during the entire lifespan of the context.
            </summary> 
            <remarks>The default implementation of this method does nothing.</remarks>
            <param name="options">The options of the <see cref="T:FluentEvents.EventsContext"/>.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.OnBuildingSubscriptions(FluentEvents.Configuration.ISubscriptionsBuilder)">
            <summary>
                Override this method to configure the event subscriptions.
                The resulting configuration may be cached and re-used during the entire lifespan of the context.
            </summary>
            <remarks>The default implementation of this method does nothing.</remarks>
            <param name="subscriptionsBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.OnBuildingPipelines(FluentEvents.Configuration.IPipelinesBuilder)">
            <summary>
                Override this method to configure the pipelines needed for handling the events.
                The resulting configuration may be cached and re-used during the entire lifespan of the context.
            </summary>
            <remarks>The default implementation of this method does nothing.</remarks>
            <param name="pipelinesBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="M:FluentEvents.EventsContext.WatchSourceEvents(System.Object,FluentEvents.EventsScope)">
            <summary>
                <para>
                     Subscribes the <see cref="T:FluentEvents.EventsContext"/> to every source's event field having a delegate with
                     a single parameter (of any type) and a return type of <see cref="T:System.Threading.Tasks.Task"/> or <see langword="void"/>.
                </para>
                <para>
                    Examples of valid delegates:
                    <see cref="T:System.Func`2">Func&lt;<see cref="T:System.Object"/>, <see cref="T:System.Threading.Tasks.Task"/>&gt;</see> or
                    <see cref="T:System.Action`1" /> or
                    <see cref="T:FluentEvents.AsyncEventPublisher`1" /> or
                    <see cref="T:FluentEvents.EventPublisher`1" />
                </para>
                <para>
                    This subscription allows the <see cref="T:FluentEvents.EventsContext"/> to forward the events
                    to the corresponding pipelines.
                </para>
            </summary>
            <param name="source">The event source.</param>
            <param name="eventsScope">The scope of the events published from this source.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source"/> and/or <paramref name="eventsScope"/> are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FluentEvents.EventsContext.ProcessQueuedEventsAsync(FluentEvents.EventsScope,System.String)">
            <summary>
                Resumes the processing of the events that have been queued.
            </summary>
            <param name="eventsScope">The scope where the queued events were published.</param>
            <param name="queueName">
                The name of the queue.
                If null all the events will be processed.
            </param>
            <exception cref="T:FluentEvents.Queues.EventsQueueNotFoundException">
                No queues were found with the supplied <paramref name="queueName"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="eventsScope"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FluentEvents.EventsContext.DiscardQueuedEvents(FluentEvents.EventsScope,System.String)">
            <summary>
                Discards all the events of a queue.
            </summary>
            <param name="eventsScope">The scope where the queued events were published.</param>
            <param name="queueName">
                The name of the queue.
                If null all the events will be discarded.
            </param>
            <exception cref="T:FluentEvents.Queues.EventsQueueNotFoundException">
                No queues were found with the supplied <paramref name="queueName"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="eventsScope"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FluentEvents.EventsContext.GetEventReceiversHostedService">
            <summary>
                Returns an <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/> that can start or stop the configured
                event receivers.
            </summary>
        </member>
        <member name="T:FluentEvents.EventsScope">
            <summary>
                The <see cref="T:FluentEvents.EventsScope"/> represents the scope where entities are attached and the events
                are handled or queued.
            </summary>
        </member>
        <member name="M:FluentEvents.EventsScope.#ctor(FluentEvents.ServiceProviders.IScopedAppServiceProvider)">
            <summary>
                Creates a new <see cref="T:FluentEvents.EventsScope"/>
            </summary>
            <param name="scopedAppServiceProvider">A scoped instance of the application service provider.</param>
        </member>
        <member name="T:FluentEvents.FluentEventsException">
            <summary>
                A base exception inherited by all exceptions thrown by FluentEvents (Except for <see cref="T:System.AggregateException"/>s).
            </summary>
        </member>
        <member name="M:FluentEvents.FluentEventsException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:FluentEvents.FluentEventsException" /> class.
            </summary>
        </member>
        <member name="M:FluentEvents.FluentEventsException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:FluentEvents.FluentEventsException" /> class.
            </summary>
        </member>
        <member name="T:FluentEvents.IAsyncEventHandler`1">
            <summary>
                An interface implemented by a service to handle an event.
                Note: the subscription should be configured in the
                <see cref="M:FluentEvents.EventsContext.OnBuildingSubscriptions(FluentEvents.Configuration.ISubscriptionsBuilder)"/> method.
            </summary>
            <typeparam name="TEvent">the type of the event.</typeparam>
        </member>
        <member name="M:FluentEvents.IAsyncEventHandler`1.HandleEventAsync(`0)">
            <summary>
                Handles an event.
            </summary>
            <param name="e">The event.</param>
            <returns></returns>
        </member>
        <member name="T:FluentEvents.Infrastructure.IEventsScope">
            <summary>
                The <see cref="T:FluentEvents.Infrastructure.IEventsScope"/> represents the scope where entities are attached and the events
                are handled or queued.
            </summary>
        </member>
        <member name="M:FluentEvents.Infrastructure.IEventsScope.GetOrAddFeature``1(System.Func{FluentEvents.ServiceProviders.IScopedAppServiceProvider,``0})">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Infrastructure.IInfrastructure`1">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="P:FluentEvents.Infrastructure.IInfrastructure`1.Instance">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:FluentEvents.Model.ISourceModelsService">
            <summary>
                Provides an API surface for getting or creating <see cref="T:FluentEvents.Model.SourceModel"/>s.
            </summary>
        </member>
        <member name="M:FluentEvents.Model.ISourceModelsService.GetOrCreateSourceModel(System.Type)">
            <summary>
                Gets or creates a new <see cref="T:FluentEvents.Model.SourceModel"/>.
            </summary>
            <param name="clrType">The <see cref="T:System.Type"/> of the events source.</param>
            <returns>The <see cref="T:FluentEvents.Model.SourceModel"/> for this <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:FluentEvents.Model.SourceModel">
            <summary>
                Represents an event source.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModel.ClrType">
            <summary>
                The type of the event source.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModel.EventFields">
            <summary>
                The list of the event fields present on the <see cref="P:FluentEvents.Model.SourceModel.ClrType"/> and created on this model.
            </summary>
        </member>
        <member name="M:FluentEvents.Model.SourceModel.#ctor(System.Type)">
            <summary>
                Creates a new instance of a <see cref="T:FluentEvents.Model.SourceModel"/>.
            </summary>
            <param name="clrType"></param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="clrType"/> is null.
            </exception>
        </member>
        <member name="T:FluentEvents.Model.SourceModelEventField">
            <summary>
                Represents a field of an event source.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.EventInfo">
            <summary>
                The <see cref="T:System.Reflection.EventInfo"/> of the represented event field.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.FieldInfo">
            <summary>
                The <see cref="T:System.Reflection.FieldInfo"/> of the represented event field.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.Name">
            <summary>
                The name of the represented event field.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.ReturnType">
            <summary>
                The return type of the represented event field.
            </summary>
        </member>
        <member name="P:FluentEvents.Model.SourceModelEventField.IsAsync">
            <summary>
                Indicates if the represented event field has an async <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Filters.EventPipelineConfigurationExtensions">
            <summary>
                Extension methods for adding an events filter to a pipeline.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Filters.EventPipelineConfigurationExtensions.ThenIsFiltered``1(FluentEvents.Configuration.EventPipelineConfiguration{``0},System.Func{``0,System.Boolean})">
            <summary>
                Adds an event filtering module to the current pipeline.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventPipelineConfiguration">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> for the pipeline being configured.
            </param>
            <param name="filter">
                A <see cref="T:System.Func`2"/> that takes the event
                as input and returns false if it should be filtered
                (When an event is filtered any module configured after the filter won't be invoked).
            </param>
            <returns>
                The same <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="eventPipelineConfiguration"/> and/or <paramref name="filter"/> are <see langword="null"/>.
            </exception>
        </member>
        <member name="T:FluentEvents.Pipelines.IPipeline">
            <summary>
                This API supports the FluentEvents infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.IPipeline.AddModule``2(``1)">
            <summary>
                Adds a module with the associated configuration to the pipeline.
            </summary>
            <typeparam name="TModule">The type of the module.</typeparam>
            <typeparam name="TConfig">The type of the module configuration.</typeparam>
            <param name="moduleConfig">An instance of the module configuration</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="moduleConfig"/> is null.
            </exception>
            <exception cref="T:FluentEvents.Pipelines.PipelineModuleNotFoundException">
                The TModule type wasn't registered in the internal service provider.
            </exception>
        </member>
        <member name="M:FluentEvents.Pipelines.IPipeline.ProcessEventAsync(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                Invokes the modules added with <see cref="M:FluentEvents.Pipelines.IPipeline.AddModule``2(``1)"/>.
            </summary>
            <param name="pipelineEvent">The event.</param>
            <param name="eventsScope">The scope of the event.</param>
        </member>
        <member name="T:FluentEvents.Pipelines.IPipelineModule`1">
            <summary>
                Represents a module for event pipelines.
            </summary>
            <typeparam name="TConfig">The type of the configuration.</typeparam>
        </member>
        <member name="M:FluentEvents.Pipelines.IPipelineModule`1.InvokeAsync(`0,FluentEvents.Pipelines.PipelineContext,FluentEvents.Pipelines.NextModuleDelegate)">
            <summary>
                This method should work with the event and invoke the <see cref="T:FluentEvents.Pipelines.NextModuleDelegate"/>
                passed in the parameters if and when the event processing should continue. 
            </summary>
            <param name="config">The configuration for the particular event being processed.</param>
            <param name="pipelineContext">The current pipeline processing context.</param>
            <param name="invokeNextModule">The delegate to invoke the next module in the pipeline.</param>
            <returns>A task to await.</returns>
        </member>
        <member name="T:FluentEvents.Pipelines.NextModuleDelegate">
            <summary>
                Invokes the next module in the pipeline if exists, otherwise it does nothing.
            </summary>
            <param name="pipelineContext">The current pipeline processing context.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="T:FluentEvents.Pipelines.PipelineContext">
            <summary>
                Represents a pipeline processing context. 
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineContext.PipelineEvent">
            <summary>
                The event being processed.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineContext.EventsScope">
            <summary>
                The current events scope.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.PipelineContext.#ctor(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                Creates a new instance of a <see cref="T:FluentEvents.Pipelines.PipelineContext"/>.
            </summary>
            <param name="pipelineEvent">The event being processed.</param>
            <param name="eventsScope">The current events scope.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="pipelineEvent"/> and/or <paramref name="eventsScope"/> are null.
            </exception>
        </member>
        <member name="T:FluentEvents.Pipelines.PipelineEvent">
            <summary>
                Represents an event.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineEvent.Event">
            <summary>
                The instance of the event.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.PipelineEvent.EventType">
            <summary>
                The instance of the event.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.PipelineEvent.#ctor">
            <summary>
                Empty constructor for serialization.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.PipelineEvent.#ctor(System.Object)">
            <param name="e">The instance of the event.</param>
        </member>
        <member name="T:FluentEvents.Pipelines.PipelineModuleNotFoundException">
            <summary>
                An exception thrown when the configured pipeline module wasn't registered
                in the internal <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Projections.EventPipelineConfigurationExtensions">
            <summary>
                Extension methods for adding a projection to a pipeline.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Projections.EventPipelineConfigurationExtensions.ThenIsProjected``2(FluentEvents.Configuration.EventPipelineConfiguration{``0},System.Func{``0,``1})">
            <summary>
                Adds a module to the current pipeline that replaces event with a projection.
            </summary>
            <remarks>
                Projections are useful when an event needs to be serialized in order to reduce
                the size and the complexity of the serialization output.
            </remarks>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="TToEvent">The type of the projected event.</typeparam>
            <param name="eventPipelineConfiguration">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> for the pipeline being configured.
            </param>
            <param name="eventConverter">
                A <see cref="T:System.Func`2"/> that takes the event as input and returns a new object.
            </param>
            <returns>
                A new <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="eventPipelineConfiguration"/> and/or <paramref name="eventConverter"/> are <see langword="null"/>.
            </exception>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.ConfigureTransmission">
            <summary>
                Provides a simple API surface to specify the sender to invoke for the transmission being configured. 
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.EventPipelineConfigurationExtensions">
            <summary>
                Extension methods for adding a publishing module to the pipeline.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Publication.EventPipelineConfigurationExtensions.ThenIsPublishedToScopedSubscriptions``1(FluentEvents.Configuration.EventPipelineConfiguration{``0})">
            <summary>
                Adds a module to the current pipeline that publishes the event to all the subscriptions in scope locally.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventPipelineConfiguration">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> for the pipeline being configured.
            </param>
            <returns>The same <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> instance so that multiple calls can be chained.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="eventPipelineConfiguration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FluentEvents.Pipelines.Publication.EventPipelineConfigurationExtensions.ThenIsPublishedToGlobalSubscriptions``1(FluentEvents.Configuration.EventPipelineConfiguration{``0},System.Func{FluentEvents.Pipelines.Publication.ConfigureTransmission,FluentEvents.Pipelines.Publication.IPublishTransmissionConfiguration})">
            <summary>
                Adds a module to the current pipeline that publishes the event to all the global subscriptions using a transmission method
                configurable with the configurePublishTransmission parameter.
            </summary>
            <remarks>
                This method can be used to configure a publication to multiple application instances with this <see cref="T:FluentEvents.EventsContext"/>
            </remarks>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventPipelineConfiguration">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> for the pipeline being configured.
            </param>
            <param name="configurePublishTransmission">A delegate for configuring how the event is transmitted.</param>
            <returns>The same <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> instance so that multiple calls can be chained.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="configurePublishTransmission"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:FluentEvents.Pipelines.Publication.EventTransmissionPluginIsNotConfiguredException">
                A transmission method has been specified but it's plugin wasn't configured in the <see cref="T:FluentEvents.Configuration.EventsContextOptions"/>.
            </exception>
        </member>
        <member name="M:FluentEvents.Pipelines.Publication.EventPipelineConfigurationExtensions.ThenIsPublishedToGlobalSubscriptions``1(FluentEvents.Configuration.EventPipelineConfiguration{``0})">
            <summary>
                Adds a module to the current pipeline that publishes the event to all the global subscriptions locally.
            </summary>
            <typeparam name="TEvent">The type that publishes the event.</typeparam>
            <param name="eventPipelineConfiguration">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> for the pipeline being configured.
            </param>
            <returns>The same <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.EventSenderNotFoundException">
            <summary>
                An exception thrown when the configured <see cref="T:FluentEvents.Transmission.IEventSender"/>
                wasn't registered in the internal <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.EventTransmissionPluginIsNotConfiguredException">
            <summary>
                An exception thrown when the transmission plugin is not configured in the <see cref="T:FluentEvents.Configuration.EventsContextOptions"/>.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.IConfigureTransmission">
            <summary>
                Provides a simple API surface to specify the sender to invoke for the transmission being configured. 
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Publication.IConfigureTransmission.With``1">
            <summary>
                This method creates a <see cref="T:FluentEvents.Pipelines.Publication.IPublishTransmissionConfiguration"/> with the specified sender type.
            </summary>
            <typeparam name="T">The type of the event sender.</typeparam>
            <returns>A configuration object with the specified sender type.</returns>
        </member>
        <member name="T:FluentEvents.Pipelines.Publication.IPublishTransmissionConfiguration">
            <summary>
                The configuration for an event transmission.
            </summary>
        </member>
        <member name="P:FluentEvents.Pipelines.Publication.IPublishTransmissionConfiguration.SenderType">
            <summary>
                The type of the event sender.
            </summary>
        </member>
        <member name="T:FluentEvents.Pipelines.Queues.EventPipelineConfigurationExtensions">
            <summary>
                Extension methods for adding a pipeline module that queues the events.
            </summary>
        </member>
        <member name="M:FluentEvents.Pipelines.Queues.EventPipelineConfigurationExtensions.ThenIsQueuedTo``1(FluentEvents.Configuration.EventPipelineConfiguration{``0},System.String)">
            <summary>
                Adds module to the current pipeline that queues the event in a queue
                and pauses the execution of the current pipeline until the event is dequeued.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventPipelineConfiguration">
                The <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> for the pipeline being configured.
            </param>
            <param name="queueName">The name of the queue.</param>
            <returns>
                The same <see cref="T:FluentEvents.Configuration.EventPipelineConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="eventPipelineConfiguration"/> and/or <paramref name="queueName"/> are null <see langword="null"/>.
            </exception>
        </member>
        <member name="T:FluentEvents.Plugins.DuplicatePluginException">
            <summary>
                An exception thrown when adding the same plugin twice.
            </summary>
        </member>
        <member name="T:FluentEvents.Plugins.IFluentEventsPlugin">
            <summary>
                This interface should be implemented by plugins.
            </summary>
        </member>
        <member name="M:FluentEvents.Plugins.IFluentEventsPlugin.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the services required for the plugin to the framework's internal <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">The framework's internal <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
        </member>
        <member name="T:FluentEvents.Publication.IPublishingService">
            <summary>
                Provides APIs to publish events.
            </summary>
        </member>
        <member name="M:FluentEvents.Publication.IPublishingService.PublishEventToScopedSubscriptionsAsync(FluentEvents.Pipelines.PipelineEvent,FluentEvents.Infrastructure.IEventsScope)">
            <summary>
                Publish an events to all the scoped subscriptions.
            </summary>
            <param name="pipelineEvent">The event to publish.</param>
            <param name="eventsScope">The scope of the event and the subscriptions.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="pipelineEvent"/> and/or <paramref name="eventsScope"/> are <see langword="null"/>.
            </exception>
            <exception cref="T:FluentEvents.Publication.PublicationAggregateException">
                One or more event handlers threw an exception.
            </exception>
        </member>
        <member name="M:FluentEvents.Publication.IPublishingService.PublishEventToGlobalSubscriptionsAsync(FluentEvents.Pipelines.PipelineEvent)">
            <summary>
                Publishes an event to all the global subscriptions.
            </summary>
            <param name="pipelineEvent">The event to publish.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="pipelineEvent"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:FluentEvents.Publication.PublicationAggregateException">
                One or more event handlers threw an exception.
            </exception>
        </member>
        <member name="T:FluentEvents.Publication.PublicationAggregateException">
            <summary>
                An exception that aggregates all exceptions thrown by the handlers of an event.
            </summary>
        </member>
        <member name="T:FluentEvents.Queues.EventsQueueNotFoundException">
            <summary>
                An exception that is thrown when the events queue with the specified name does not exists.
            </summary>
        </member>
        <member name="T:FluentEvents.ServiceCollectionExtensions">
            <summary>
                Extension methods for configuring an <see cref="T:FluentEvents.EventsContext"/> with Dependency Injection.
            </summary>
        </member>
        <member name="M:FluentEvents.ServiceCollectionExtensions.AddEventsContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{FluentEvents.Configuration.EventsContextOptions})">
            <summary>
                Registers the given <see cref="T:FluentEvents.EventsContext"/> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="T">The type of context to be registered.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register with.</param>
            <param name="optionsBuilder">
                <para>
                    An action to configure the <see cref="T:FluentEvents.Configuration.EventsContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:FluentEvents.EventsContext.OnConfiguring(FluentEvents.Configuration.EventsContextOptions)" /> method in your derived context.
                </para>
                <para>
                    If an action is supplied here, the <see cref="M:FluentEvents.EventsContext.OnConfiguring(FluentEvents.Configuration.EventsContextOptions)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:FluentEvents.EventsContext.OnConfiguring(FluentEvents.Configuration.EventsContextOptions)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
            </param>
            <returns>The original <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="services"/> or <paramref name="optionsBuilder"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:FluentEvents.ServiceCollectionExtensions.AddWithEventsAttachedTo``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action)">
            <summary>
                This method watches the services registered inside of the addServicesAction
                and makes sure that they are attached to the <see cref="T:FluentEvents.EventsContext"/>
                when they are resolved by the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <example>
                <code>
                    public void ConfigureServices(IServiceCollection services)
                    {
                        services
                            .AddWithEventsAttachedTo&lt;MyEventsContext&gt;(() => {
                                services.AddScoped&lt;IMyService, MyService&gt;();
                                services.AddSingleton&lt;IMyService2, MyService2&gt;();
                            });
                    }
                </code>
            </example>
            <typeparam name="TEventsContext">The <see cref="T:FluentEvents.EventsContext"/> where the services are attached.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register with.</param>
            <param name="addServices">An <see cref="T:System.Action"/> that add services to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The original <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="T:FluentEvents.ServiceProviders.IRootAppServiceProvider">
            <summary>
                Represents the application service provider.
            </summary>
        </member>
        <member name="T:FluentEvents.ServiceProviders.IScopedAppServiceProvider">
            <summary>
                Represents a scoped application service provider.
            </summary>
        </member>
        <member name="M:FluentEvents.Subscriptions.ISubscriptionCreationTask.CreateSubscriptions(System.IServiceProvider)">
            <exception cref="T:FluentEvents.Subscriptions.SubscribingServiceNotFoundException">
                The service provider cannot resolve the subscribing service.
            </exception>
        </member>
        <member name="T:FluentEvents.Subscriptions.SubscribingServiceNotFoundException">
            <summary>
                An exception thrown when the application's <see cref="T:System.IServiceProvider"/> can't resolve a service
                with an automatic subscription configured.
            </summary>
        </member>
        <member name="P:FluentEvents.Subscriptions.SubscribingServiceNotFoundException.ServiceType">
            <summary>
                The type of the service that wasn't found.
            </summary>
        </member>
        <member name="T:FluentEvents.Transmission.IEventReceiver">
            <summary>
                Represents a service that receives events transmitted from an <see cref="T:FluentEvents.Transmission.IEventSender"/>.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.IEventReceiver.StartReceivingAsync(System.Threading.CancellationToken)">
            <summary>
                This method should start a worker that receives events transmitted from an <see cref="T:FluentEvents.Transmission.IEventSender"/>. 
            </summary>
            <param name="cancellationToken">Indicates that the start receiving process has been aborted.</param>
        </member>
        <member name="M:FluentEvents.Transmission.IEventReceiver.StopReceivingAsync(System.Threading.CancellationToken)">
            <summary>
                This method should stop the worker that receives events transmitted from an <see cref="T:FluentEvents.Transmission.IEventSender"/>. 
            </summary>
            <param name="cancellationToken">Indicates that the start receiving process has been aborted.</param>
        </member>
        <member name="T:FluentEvents.Transmission.IEventSender">
            <summary>
                Represents a service that send events to an <see cref="T:FluentEvents.Transmission.IEventReceiver"/>.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.IEventSender.SendAsync(FluentEvents.Pipelines.PipelineEvent)">
            <summary>
                This method should send the event to an <see cref="T:FluentEvents.Transmission.IEventReceiver"/>.
            </summary>
            <param name="pipelineEvent">The event to send.</param>
        </member>
        <member name="T:FluentEvents.Transmission.IEventsSerializationService">
            <summary>
                A service that serializes or deserializes an event for transmission.
            </summary>
        </member>
        <member name="M:FluentEvents.Transmission.IEventsSerializationService.SerializeEvent(FluentEvents.Pipelines.PipelineEvent)">
            <summary>
                This method should serialize an event.
            </summary>
            <param name="pipelineEvent">The event to serialize.</param>
            <returns>The event serialized.</returns>
        </member>
        <member name="M:FluentEvents.Transmission.IEventsSerializationService.DeserializeEvent(System.Byte[])">
            <summary>
                This method should deserialize an event.
            </summary>
            <param name="eventData">The event to deserialize.</param>
            <returns>The event deserialized.</returns>
        </member>
    </members>
</doc>
